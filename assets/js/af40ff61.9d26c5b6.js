"use strict";(self.webpackChunkhyperdrive=self.webpackChunkhyperdrive||[]).push([[424],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,v=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?i.createElement(v,a(a({ref:t},u),{},{components:n})):i.createElement(v,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8587:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],l={sidebar_position:2},p="Navigation",s={unversionedId:"multiplatformx/navigation",id:"multiplatformx/navigation",isDocsHomePage:!1,title:"Navigation",description:"Hyperdrive view model navigation uses a tree-like structure instead of Jetpack Compose's NavController path structure.",source:"@site/docs/multiplatformx/navigation.md",sourceDirName:"multiplatformx",slug:"/multiplatformx/navigation",permalink:"/docs/multiplatformx/navigation",editUrl:"https://github.com/Brightify/hyperdrive-kt/edit/main/website/docs/multiplatformx/navigation.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"multiplatformxSidebar",previous:{title:"Overview",permalink:"/docs/multiplatformx/intro"}},u=[],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"navigation"},"Navigation"),(0,o.kt)("p",null,"Hyperdrive view model navigation uses a tree-like structure instead of Jetpack Compose's ",(0,o.kt)("inlineCode",{parentName:"p"},"NavController")," path structure."),(0,o.kt)("p",null,"The view models presented are ",(0,o.kt)("em",{parentName:"p"},"attached")," into the navigation tree and their observing in ",(0,o.kt)("inlineCode",{parentName:"p"},"collect")," as well as any work in ",(0,o.kt)("inlineCode",{parentName:"p"},"whileAttached()")," is performed."),(0,o.kt)("p",null,"[TODO: Hyperdrive navigation is being upgraded to support jumping to a specific node in the tree (e.g. user detail with an ID from a notification).]"),(0,o.kt)("p",null,"The parent view model ",(0,o.kt)("em",{parentName:"p"},"presents")," the child view models and has full control over whether they're shown or not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="EventListViewModel.kt"',title:'"EventListViewModel.kt"'},"class EventListViewModel: BaseViewModel() {\n    var presentedDetail: EventDetailViewModel? by managed(null)\n\n    fun openDetail() {\n        presentedDetail = EventDetailViewModel()\n    }\n}\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("strong",{parentName:"p"},"SwiftUI"),", it's enough to use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"SwitchingNavigationLink"))," with the presented view model as its parameter along with the content that represents the view to present."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="EventListView.swift"',title:'"EventListView.swift"'},"struct EventListView: View {\n    @ObservedObject\n    private(set) var viewModel: EventListViewModel\n\n    var body: some View {\n        NavigationView {\n            ZStack {\n                SwitchingNavigationLink(\n                    selection: $viewModel.presentedDetail,\n                    content: { EventDetailView(viewModel: $0) }\n                )\n\n                // View layout.\n            }\n        }\n    }\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Jetpack Compose")," doesn't use ",(0,o.kt)("inlineCode",{parentName:"p"},"NavController")," and instead Hyperdrive's ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationController")," is utilized."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="EventListView.kt"',title:'"EventListView.kt"'},"@Composable\nfun EventListView(viewModel: EventListViewModel, modifier: Modifier) {\n    if (viewModel.presentedDetail == null) {\n        // View layout.\n    }\n\n    NavigationController.Pushed(present = viewModel::presentedDetail) {\n        EventListView(viewModel = it, modifier = modifier)\n    }\n}\n")),(0,o.kt)("p",null,"The current view is shown if ",(0,o.kt)("inlineCode",{parentName:"p"},"presentedDetail")," is null, otherwise ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationController")," automatically presents the provided view."))}d.isMDXComponent=!0}}]);